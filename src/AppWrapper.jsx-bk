
import { Device } from '@capacitor/device'
import React, { useEffect, useState, } from 'react'
import { ThemeProvider } from 'styled-components'
import { ToastContainer } from 'react-toastify'

import config from 'config'

import {
  C,
  logg,
  S,
  useApi,
} from "$shared"
import AppDesktop from './AppDesktop'
import AppMobile from './AppMobile'

import '@ionic/react/css/core.css'
import '@ionic/react/css/normalize.css'
import '@ionic/react/css/structure.css'
import '@ionic/react/css/typography.css'
import '@ionic/react/css/padding.css'
import '@ionic/react/css/float-elements.css'
import '@ionic/react/css/text-alignment.css'
import '@ionic/react/css/text-transformation.css'
import '@ionic/react/css/flex-utils.css'
import '@ionic/react/css/display.css'

/**
 * Sets themeProvider
 * Sets ToastContainer
 */
const AppWrapper = (props) => {
  // logg(props, 'AppWrapper')

  const [ os, setOs ] = useState(null)
  // info.operatingSystem === 'ios' || 'android'
  const fn = async () => {
    let info = await Device.getInfo()
    setOs(info.operatingSystem)
  }
  fn()
  if (!os) { return null }

  const [theme, setTheme] = useState(window.localStorage.getItem(C.theme) || C.themes.light)
  const toggleTheme = (e) => {
    if (theme === C.themes.light) {
      window.localStorage.setItem(C.theme, C.themes.dark)
      setTheme(C.themes.dark)
    } else {
      window.localStorage.setItem(C.theme, C.themes.light)
      setTheme(C.themes.light)
    }
  }

  const childProps = {
    theme, toggleTheme,
  }


  return <ThemeProvider theme={theme == C.themes.light ? S.lightTheme: S.darkTheme} >

    { "ios android".includes(os) ?
      <AppMobile {...childProps} />
      : <AppDesktop {...childProps} /> }

    <ToastContainer position="bottom-left" />

  </ThemeProvider>
}

export default AppWrapper
