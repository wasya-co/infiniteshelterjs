{"version":3,"sources":["../../../src/web.ts"],"names":[],"mappings":";8/MAoDA,IAAa,EAAb,kDACE,oDACQ,CACJ,KAAM,gBACN,UAAW,CAAC,SAJlB,8CAQE,SAAW,GAAuC,WAC1C,EAAiB,CAAE,QAAS,SAClC,OAAO,IAAI,SAAQ,SAAC,EAAS,GAC3B,IACE,OAAO,EAAK,WAAW,EAAQ,QAAQ,MAAK,WAC1C,GAAG,KAAI,+BAAM,GAAmB,IAChC,OAEF,MAAO,GACP,EAAO,SAjBf,wBAsBU,SAAW,GACjB,GAAwB,qBAAb,SACT,OAAO,QAAQ,UAIjB,GADyB,OAAR,eAAQ,IAAR,cAAQ,EAAR,SAAU,eADV,MAGf,OAAO,QAAQ,UAGjB,IAAM,EAAO,SAAS,qBAAqB,QAAQ,GAC7C,EAAS,SAAS,cAAc,UACtC,OAAO,IAAI,SAAc,YACvB,EAAO,OAAQ,EACf,EAAO,OAAQ,EACf,EAAO,GAXQ,KAYf,EAAO,OAAS,WACd,KAEF,EAAO,IAAP,uCAAmD,OAAN,QAAM,IAAN,IAAU,QAAvD,WACA,EAAK,YAAY,QA1CvB,0DA8CE,WAAY,GAAZ,wEAGE,QAAQ,IAAI,yBAA0B,GAHxC,kBAKS,IAAI,SAA+B,SAAC,EAAS,GAClD,GAAG,OACD,YACE,QAAQ,MAAM,WAAY,GAEF,cAApB,EAAS,OACX,EAAQ,CACN,YAAa,CACX,MAAO,EAAS,aAAa,eAIjC,EAAO,CACL,YAAa,CACX,MAAO,UAKf,CAAE,MAAO,EAAQ,YAAY,KAAK,WAxBxC,2CA9CF,kHA2EE,uGACS,IAAI,SAAc,YACvB,GAAG,QAAO,kBAAM,WAFpB,2CA3EF,sHAiFE,uGACS,IAAI,SAA+B,YACxC,GAAG,aAAY,YAAE,OAAI,EAAQ,UAFjC,2CAjFF,gIAuFE,uGACS,IAAI,SACT,SAAC,EAAS,GACR,GAAG,gBAAe,YAChB,GAAwB,cAApB,EAAS,OAAwB,CACnC,IAAM,EAA6C,CACjD,YAAa,CACX,mBAAe,EACf,oBAAqB,GACrB,aAAS,EACT,eAAW,EACX,iBAAa,EACb,YAAa,GACb,MAAO,EAAS,aAAa,YAC7B,OAAQ,EAAS,aAAa,SAGlC,EAAQ,QAER,EAAO,CACL,YAAa,CACX,MAAO,eArBrB,2CAvFF,qHAqHE,WAAmC,GAAnC,8EAGQ,EAAS,EAAQ,OAAO,KAAK,KAHrC,kBAKS,IAAI,SAAW,SAAC,EAAS,GAC9B,GAAG,IACD,MACA,CAAE,WACF,YACM,EAAS,MACX,EAAO,EAAS,MAAM,SAKxB,EAAW,UAhBnB,2CArHF,4D,MAAsC","file":"static/js/41.458e1bb6.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class FacebookLoginWeb extends WebPlugin {\n    constructor() {\n        super({\n            name: 'FacebookLogin',\n            platforms: ['web'],\n        });\n    }\n    initialize(options) {\n        const defaultOptions = { version: 'v10.0' };\n        return new Promise((resolve, reject) => {\n            try {\n                return this.loadScript(options.locale).then(() => {\n                    FB.init(Object.assign(Object.assign({}, defaultOptions), options));\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    loadScript(locale) {\n        if (typeof document === 'undefined') {\n            return Promise.resolve();\n        }\n        const scriptId = 'fb';\n        const scriptEl = document === null || document === void 0 ? void 0 : document.getElementById(scriptId);\n        if (scriptEl) {\n            return Promise.resolve();\n        }\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        return new Promise(resolve => {\n            script.defer = true;\n            script.async = true;\n            script.id = scriptId;\n            script.onload = () => {\n                resolve();\n            };\n            script.src = `https://connect.facebook.net/${locale !== null && locale !== void 0 ? locale : 'en_US'}/sdk.js`;\n            head.appendChild(script);\n        });\n    }\n    async login(options) {\n        console.log('FacebookLoginWeb.login', options);\n        return new Promise((resolve, reject) => {\n            FB.login(response => {\n                console.debug('FB.login', response);\n                if (response.status === 'connected') {\n                    resolve({\n                        accessToken: {\n                            token: response.authResponse.accessToken,\n                        },\n                    });\n                }\n                else {\n                    reject({\n                        accessToken: {\n                            token: null,\n                        },\n                    });\n                }\n            }, { scope: options.permissions.join(',') });\n        });\n    }\n    async logout() {\n        return new Promise(resolve => {\n            FB.logout(() => resolve());\n        });\n    }\n    async reauthorize() {\n        return new Promise(resolve => {\n            FB.reauthorize(it => resolve(it));\n        });\n    }\n    async getCurrentAccessToken() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus(response => {\n                if (response.status === 'connected') {\n                    const result = {\n                        accessToken: {\n                            applicationId: undefined,\n                            declinedPermissions: [],\n                            expires: undefined,\n                            isExpired: undefined,\n                            lastRefresh: undefined,\n                            permissions: [],\n                            token: response.authResponse.accessToken,\n                            userId: response.authResponse.userID,\n                        },\n                    };\n                    resolve(result);\n                }\n                else {\n                    reject({\n                        accessToken: {\n                            token: null,\n                        },\n                    });\n                }\n            });\n        });\n    }\n    async getProfile(options) {\n        const fields = options.fields.join(',');\n        return new Promise((resolve, reject) => {\n            FB.api('/me', { fields }, response => {\n                if (response.error) {\n                    reject(response.error.message);\n                    return;\n                }\n                resolve(response);\n            });\n        });\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}